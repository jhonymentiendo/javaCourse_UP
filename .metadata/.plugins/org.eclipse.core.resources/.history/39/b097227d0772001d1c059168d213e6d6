package main;

public class ScondClass {

	public static void main(String[] args) {

		System.out.println(getGreatestCommonDivisor(19, 99));

	}

	public static int getGreatestCommonDivisor(int first,int second){
        int resp =-1;
        int limit = 10;
        int temp1=first,temp2=second;
        
        if(first>limit && second>limit){
        	
            while(temp1<1) {
            	while(temp2<1) {
            		if(temp1== temp2 && first%temp1 ==0 && second%temp2==0){
            			resp = temp2;
            		}
            		temp2--;
            	}
            	temp1--;	
            }
        	
        	
        }
        
        return resp;
    }
	
	
	public static boolean isValid(int num) {
		int rango1 = 10, rango2 = 1000;
		return num >= rango1 && num <= rango2;
	}
	
	public static boolean hasSameLastDigit2(int num1, int num2, int num3) {
		boolean resp = false;
		
		int tem1 = num1, tem2 = num2, tem3 = num3;
		int cifra1 = 0, cifra2 = 0, cifra3 = 0;
		

		if (isValid(num1) && isValid(num2) && isValid(num3)) {
			cifra1 = tem1%10;
			cifra2 = tem2%10;
			cifra3 = tem3%10;
			
			if (cifra1 ==cifra2 || cifra2==cifra3 || cifra3==cifra1 ) {
				resp = true;
				}
			
		}
		return resp;
	}
	
	public static boolean hasSameLastDigit(int num1, int num2, int num3) {
		boolean resp = false;
		
		int tem1 = num1, tem2 = num2, tem3 = num3;
		int cifra1 = 0, cifra2 = 0, cifra3 = 0;
		boolean isRigtmost1=true,isRigtmost2=true,isRigtmost3=true;

		if (isValid(num1) && isValid(num2) && isValid(num3)) {
			while (tem1 != 0) {
				cifra1 = tem1 % 10;
				tem2 = num2;
				if(isRigtmost1) {
					
					
				while (tem2 != 0) {
					cifra2 = tem2 % 10;
					tem3 = num3;
					if(isRigtmost2) {
						
					while (tem3 != 0) {
						cifra3 = tem3 % 10;
						if(isRigtmost3) {
							if (cifra1 ==cifra2 || cifra2==cifra3 || cifra3==cifra1 ) {
								resp = true;
								}
							isRigtmost3=false;
						}
							
						tem3 /= 10;
					}
					isRigtmost2=false;}
					tem2 /= 10;
				}
				tem1=0;}
			}
		}
		return resp;
	}

	public static boolean hasSharedDigit(int num1, int num2) {
		boolean resp = false;
		int rango1 = 10, rango2 = 99;
		int tem1 = num1, tem2 = num2;
		int cifra1 = 0, cifra2 = 0;

		if (num1 >= rango1 && num1 <= rango2 && num2 >= rango1 && num2 <= rango2) {
			while (tem1 != 0) {
				cifra1 = tem1 % 10;
				tem2 = num2;
				while (tem2 != 0) {
					cifra2 = tem2 % 10;
					if (cifra1 == cifra2) {
						resp = true;
					}
					tem2 /= 10;
				}
				tem1 /= 10;
			}
		}
		return resp;
	}

	public static int getEvenDigitSum(int number) {
		int resp = 0, temp = number, numsuma = 0;

		if (number < 0) {
			resp = -1;
		} else {
			while (temp != 0) {
				numsuma = temp % 10;
				temp /= 10;
				if (numsuma % 2 == 0) {
					resp += numsuma;
				}
			}
		}
		return resp;
	}

	public static int sumFirstAndLastDigit(int number) {
		int fn = number, ln = number, resp = 0;

		if (number < 0) {
			resp = -1;
		} else {
			while (fn >= 10)
				fn /= 10;

			ln = (ln % 10);
			resp = fn + ln;
		}
		return resp;
	}

	public static boolean isPalindrome(int number) {

		int reversenumber = 0;
		int temp = number;
		// resp = number<0 ? true : ()

		while (temp != 0) {
			reversenumber = (reversenumber * 10) + (temp % 10);
			temp = temp / 10;

			System.out.println("\nreversenumber:" + reversenumber);
			System.out.println("\ntemp:" + temp);

		}

		return reversenumber == number;

	}

	public static double area(double radius) {
		double resp;
		resp = radius < 0 ? -1.0 : ((3.1416 * radius) * (3.1416 * radius));
		return resp;
	}

	public static double area(double x, double y) {
		double resp;
		resp = (x < 0 || y < 0) ? -1.0 : x * y;
		return resp;
	}

	public static boolean isLeapYear(int year) {

		return (year < 0) ? false : (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));

	}

	public static boolean isLeapYear(double year) {

		return (year < 0) ? false : (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));

	}

	public static boolean shouldWakeUp(boolean barking, int hourOfDay) {
		// We have to wake up if the dog is barking before 8 or after 22 hours so in
		// that case return true.
		boolean resp = false;

		if (barking && hourOfDay < 24 && hourOfDay >= 0) {
			resp = hourOfDay < 8 || hourOfDay > 22;
		}

		return resp;
	}

	public static void checkNumber(int number) {
		String resp = "";

		resp = (number == 0) ? "zero" : (number > 0 ? "positive" : "negative");

		System.out.println(resp);

	}

	public static void printMegaBytesAndKiloBytes(int kiloBytes) {
		String resp = "Invalid Value";
		int XX = 0, YY = 0, ZZ = 0;

		if (kiloBytes >= 0) {
			XX = kiloBytes;
			YY = XX / 1024;
			ZZ = XX % 1024;

			resp = XX + " KB = " + YY + " MB and " + ZZ + " KB";

		}

		System.out.println(resp);

	}

	public static long toMilesPerHour(double kilometersPerHour) {
		long resp = (long) (kilometersPerHour < 0 ? -1 : Math.round(kilometersPerHour / 1.609));
		return resp;
	}

	public static void printConversion(double kilometersPerHour) {
		System.out.println(kilometersPerHour < 0 ? "Invalid Value"
				: kilometersPerHour + " km/h = " + toMilesPerHour(kilometersPerHour) + " mi/h");
	}

}
